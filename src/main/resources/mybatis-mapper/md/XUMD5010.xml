<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mom.backend.XUMD5010">
    <select id="get_findBtn1" parameterType="java.util.HashMap"  resultType="com.mom.backend.dto.LowerHashMap" fetchSize="1000">
        <if test="startPage != null and startPage != '' and endPage != null and endPage != ''">
		SELECT A.*
		FROM   (
		 </if>
		        SELECT ML.COMPANY_CD
	                 , ML.DIVISION_CD
	                 , ML.LOCATION_CD 
	                 , ML.LOCATION_NM
	                 , ML.WAREHOUSE_CD 
	                 , (SELECT MOM_COMMON_PKG.FN_GET_WAREHOUSE_NAME(ML.COMPANY_CD, ML.DIVISION_CD, ML.WAREHOUSE_CD) FROM DUAL) AS WAREHOUSE_NM
	                 , ML.LOGISTIC_USE_CD
	                 , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(ML.COMPANY_CD, ML.DIVISION_CD, 'MD0020', ML.LOGISTIC_USE_CD, #{langCd, jdbcType=VARCHAR}) FROM DUAL) AS LOGISTIC_USE_NM
	                 , ML.STOCK_CONTROL_YN
	                 , ML.STOCK_RECEIPT_BLOCK_YN
	                 , ML.STOCK_RELEASE_BLOCK_YN
	                 , ML.NEGATIVE_STOCK_ALLOWED_YN
	                 , ML.STORAGING_CONTENTS_CD
	                 , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(ML.COMPANY_CD, ML.DIVISION_CD, 'MD0021', ML.STORAGING_CONTENTS_CD, #{langCd, jdbcType=VARCHAR}) FROM DUAL) AS STORAGING_CONTENTS_NM
	                 , ML.CYCLE_COUNTING_USER_NO
	                 , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME(ML.COMPANY_CD, ML.DIVISION_CD, ML.CYCLE_COUNTING_USER_NO) FROM DUAL ) AS CYCLE_COUNTING_USER_NM
	                 , TO_CHAR(ML.CYCLE_COUNTING_DATE ,'YYYY-MM-DD') AS CYCLE_COUNTING_DATE
	                 , ML.CYCLE_COUNTING_TERM
	                 , ML.CYCLE_COUNTING_UOM
	                 , (SELECT MOM_COMMON_PKG.FN_GET_UNIT_NAME(ML.COMPANY_CD, ML.DIVISION_CD, ML.CYCLE_COUNTING_UOM) FROM DUAL) AS CYCLE_COUNTING_UOM_NM
	                 , ML.USE_YN
	                 , ML.DESCRIPTION
	                 , ML.UPDATE_BY      AS UPDATE_USER_NO
	                 , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME(ML.COMPANY_CD, ML.DIVISION_CD, ML.UPDATE_BY) FROM DUAL ) AS UPDATE_USER_NM
	                 , TO_CHAR(ML.UPDATE_DATE ,'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
	                 , COUNT(*) OVER()   AS TOTAL_COUNT
	                 , ROW_NUMBER() OVER(PARTITION BY ML.COMPANY_CD,ML.DIVISION_CD ORDER BY ML.LOCATION_CD) AS ROW_CNT
	                 , ROWIDTOCHAR(ML.ROWID)  AS KEY_ID
	            FROM   MOM_LOCATION ML
	            WHERE  ML.COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
	            AND    ML.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		        <if test="locationCd != null and locationCd != ''">
		        AND    UPPER(ML.LOCATION_CD) LIKE '%' || UPPER(#{locationCd, jdbcType=VARCHAR}) || '%' 
		        </if>
		        <if test="locationNm != null and locationNm != ''">
		          AND    UPPER(ML.LOCATION_NM) LIKE '%' || UPPER(#{locationNm, jdbcType=VARCHAR}) || '%' 
		        </if>
		         <if test="warehouseCd != null and warehouseCd != ''">
		          AND    ML.WAREHOUSE_CD = #{warehouseCd, jdbcType=VARCHAR}
		        </if>
		         <if test="useYn != null and useYn != ''">
		          AND    ML.USE_YN = #{useYn, jdbcType=VARCHAR}
		        </if>          
		<if test="startPage != null and startPage != '' and endPage != null and endPage != ''">
		     ) A
		WHERE ROW_CNT BETWEEN #{startPage, jdbcType=INTEGER} AND #{endPage, jdbcType=INTEGER}
		</if>
    </select>
    <delete id="remove_createBtn1" parameterType="java.util.List">
    DELETE FROM MOM_PROC_LOCATION
        <where>
            <foreach collection="list" item="item" open="" close="" separator="OR">
          (       COMPANY_CD  = #{item.companyCd, jdbcType=VARCHAR}
             AND  DIVISION_CD = #{item.divisionCd, jdbcType=VARCHAR}
             AND  CREATE_BY   = #{item.userId, jdbcType=VARCHAR}
          )
            </foreach>
        </where>
    </delete>  
    <insert id="create_createBtn1" parameterType="java.util.List">
        <foreach item="item" collection="list" index="i" separator=" " open="INSERT ALL" close="SELECT * FROM DUAL"> 
        INTO MOM_PROC_LOCATION( COMPANY_CD
							  , DIVISION_CD
							  , LOCATION_CD
							  , LOCATION_NM
							  , WAREHOUSE_CD
							  , LOGISTIC_USE_CD
							  , STOCK_CONTROL_YN
							  , STOCK_RECEIPT_BLOCK_YN
							  , STOCK_RELEASE_BLOCK_YN
							  , NEGATIVE_STOCK_ALLOWED_YN
							  , STORAGING_CONTENTS_CD
							  , CYCLE_COUNTING_USER_NO
							  , CYCLE_COUNTING_TERM
							  , CYCLE_COUNTING_UOM
							  , USE_YN
							  , DESCRIPTION
							  , DEL_YN
						   	  , VAL_MSG
							  , MULTI_MSG
							  , CREATE_BY
							  , CREATE_DATE
							  )
        VALUES                ( #{item.companyCd, jdbcType=VARCHAR}
		                      , #{item.divisionCd, jdbcType=VARCHAR}
		                      , #{item.locationCd, jdbcType=VARCHAR}
		                      , #{item.locationNm, jdbcType=VARCHAR}
		                      , #{item.warehouseCd, jdbcType=VARCHAR}
		                      , #{item.logisticUseId, jdbcType=VARCHAR}
		                      , #{item.stockControlYn, jdbcType=VARCHAR}
		                      , #{item.stockReceiptBlockYn, jdbcType=VARCHAR}
		                      , #{item.stockReleaseBlockYn, jdbcType=VARCHAR}
		                      , #{item.negativeStockAllowedYn, jdbcType=VARCHAR}
		                      , #{item.storagingContentsCd, jdbcType=VARCHAR}
		                      , #{item.cycleCountingUserNo, jdbcType=VARCHAR}
		                      , #{item.cycleCountingTerm, jdbcType=NUMERIC}
		                      , #{item.cycleCountingUom, jdbcType=VARCHAR}
		                      , #{item.useYn, jdbcType=VARCHAR}
		                      , #{item.description, jdbcType=VARCHAR}
		                      , #{item.delYn, jdbcType=VARCHAR}
		                      , #{item.valMsg, jdbcType=VARCHAR}
		                      , #{item.multiMsg, jdbcType=VARCHAR}
		                      , #{item.userId, jdbcType=VARCHAR}
		                      , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{item.companyCd, jdbcType=VARCHAR},#{item.divisionCd, jdbcType=VARCHAR})
	                          )
        </foreach>
    </insert>
    <select id="proc_createBtn1" statementType="CALLABLE" parameterType="java.util.HashMap" resultType="com.mom.backend.dto.LowerHashMap">  
        { CALL MOM_MASTER_INFO_PKG.SP_UPSERT_LOCATION( #{p_err_code,  jdbcType=VARCHAR, mode=OUT}
	                                                 , #{p_err_msg,   jdbcType=VARCHAR, mode=OUT}
	                                                 , #{companyCd,   jdbcType=VARCHAR, mode=IN}
	                                                 , #{divisionCd,  jdbcType=VARCHAR, mode=IN} 
	                                                 , #{actionMode,  jdbcType=VARCHAR, mode=IN}        
	                                                 , #{userId,      jdbcType=VARCHAR, mode=IN} )}                    
    </select> 
    <select id="get_excelUpBtn1" parameterType="java.util.HashMap"  resultType="com.mom.backend.dto.LowerHashMap" fetchSize="1000">
	    SELECT NVL(VAL_MSG,'PASS') AS VAL_MSG
	         , MULTI_MSG      
	    FROM   MOM_PROC_LOCATION
	    WHERE  COMPANY_CD  = #{companyCd , jdbcType=VARCHAR}
	    AND    DIVISION_CD = #{divisionCd , jdbcType=VARCHAR}
	    AND    CREATE_BY    = #{userId , jdbcType=VARCHAR}
  </select> 
    <delete id="remove_excelUpBtnV1" parameterType="java.util.List">
    DELETE FROM MOM_PROC_LOCATION
        <where>
            <foreach collection="list" item="item" open="" close="" separator="OR">
          (       COMPANY_CD  = #{item.companyCd, jdbcType=VARCHAR}
             AND  DIVISION_CD = #{item.divisionCd, jdbcType=VARCHAR}
             AND  CREATE_BY   = #{item.userId, jdbcType=VARCHAR}
          )
            </foreach>
        </where>
    </delete>  
    <insert id="create_excelUpBtnV1" parameterType="java.util.List">
        <foreach item="item" collection="list" index="i" separator=" " open="INSERT ALL" close="SELECT * FROM DUAL"> 
        INTO MOM_PROC_LOCATION( COMPANY_CD
							  , DIVISION_CD
							  , LOCATION_CD
							  , LOCATION_NM
							  , WAREHOUSE_CD
							  , LOGISTIC_USE_CD
							  , STOCK_CONTROL_YN
							  , STOCK_RECEIPT_BLOCK_YN
							  , STOCK_RELEASE_BLOCK_YN
							  , NEGATIVE_STOCK_ALLOWED_YN
							  , STORAGING_CONTENTS_CD
							  , CYCLE_COUNTING_USER_NO
							  , CYCLE_COUNTING_TERM
							  , CYCLE_COUNTING_UOM
							  , USE_YN
							  , DESCRIPTION
							  , DEL_YN
						   	  , VAL_MSG
							  , MULTI_MSG
							  , CREATE_BY
							  , CREATE_DATE
							  )
        VALUES                ( #{item.companyCd, jdbcType=VARCHAR}
		                      , #{item.divisionCd, jdbcType=VARCHAR}
		                      , #{item.locationCd, jdbcType=VARCHAR}
		                      , #{item.locationNm, jdbcType=VARCHAR}
		                      , #{item.warehouseCd, jdbcType=VARCHAR}
		                      , #{item.logisticUseId, jdbcType=VARCHAR}
		                      , #{item.stockControlYn, jdbcType=VARCHAR}
		                      , #{item.stockReceiptBlockYn, jdbcType=VARCHAR}
		                      , #{item.stockReleaseBlockYn, jdbcType=VARCHAR}
		                      , #{item.negativeStockAllowedYn, jdbcType=VARCHAR}
		                      , #{item.storagingContentsCd, jdbcType=VARCHAR}
		                      , #{item.cycleCountingUserNo, jdbcType=VARCHAR}
		                      , #{item.cycleCountingTerm, jdbcType=NUMERIC}
		                      , #{item.cycleCountingUom, jdbcType=VARCHAR}
		                      , #{item.useYn, jdbcType=VARCHAR}
		                      , #{item.description, jdbcType=VARCHAR}
		                      , 'N'
		                      , #{item.valMsg, jdbcType=VARCHAR}
		                      , #{item.multiMsg, jdbcType=VARCHAR}
		                      , #{item.userId, jdbcType=VARCHAR}
		                      , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{item.companyCd, jdbcType=VARCHAR},#{item.divisionCd, jdbcType=VARCHAR})
	                          )
        </foreach>
    </insert>
    <select id="proc_excelUpBtnV1" statementType="CALLABLE" parameterType="java.util.HashMap" resultType="com.mom.backend.dto.LowerHashMap">  
        { CALL MOM_MASTER_INFO_PKG.SP_UPSERT_LOCATION( #{p_err_code,  jdbcType=VARCHAR, mode=OUT}
	                                                 , #{p_err_msg,   jdbcType=VARCHAR, mode=OUT}
	                                                 , #{companyCd,   jdbcType=VARCHAR, mode=IN}
	                                                 , #{divisionCd,  jdbcType=VARCHAR, mode=IN} 
	                                                 , #{actionMode,  jdbcType=VARCHAR, mode=IN}        
	                                                 , #{userId,      jdbcType=VARCHAR, mode=IN} )}                    
    </select>  
</mapper>    