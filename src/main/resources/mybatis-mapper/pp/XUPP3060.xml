<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mom.backend.XUPP3060">
	<select id="get_findBtn1" parameterType="java.util.HashMap" resultType="com.mom.backend.dto.LowerHashMap" fetchSize="1000">
	    <if test="startPage != null and startPage != '' and endPage != null and endPage != ''">
        SELECT A.*
	    FROM   (
	    </if>
				SELECT MWO.COMPANY_CD
				     , MWO.DIVISION_CD
				     , MWO.WORK_ORDER_ID   
				     , MWO.WORK_ORDER_ID AS KEY_ID
				     , MWO.WO_TYPE
				     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MWO.COMPANY_CD, MWO.DIVISION_CD, 'PP0002', MWO.WO_TYPE, #{langCd, jdbcType=VARCHAR}) FROM DUAL)  AS WO_TYPE_NM
				     , MWO.ITEM_ID
				     , MI.ITEM_NM
				     , MI.ITEM_TYPE
				     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MWO.COMPANY_CD, MWO.DIVISION_CD, 'MD0002', MI.ITEM_TYPE, #{langCd, jdbcType=VARCHAR}) FROM DUAL)  AS ITEM_TYPE_NM
				     , MI.ITEM_SPEC
				     , MWG.WORK_GROUP_CD
				     , MWG.WORK_GROUP_NM
				     , MWO.WORK_CENTER_CD
				     , MWC.WORK_CENTER_NM
				     , MWO.CONSUME_LOCATION_CD
				     , (SELECT MOM_COMMON_PKG.FN_GET_LOCATION_NAME(MWO.COMPANY_CD, MWO.DIVISION_CD, MWO.CONSUME_LOCATION_CD) FROM DUAL) AS CONSUME_LOCATION_NM  
				     , MWO.GOOD_LOCATION_CD
				     , (SELECT MOM_COMMON_PKG.FN_GET_LOCATION_NAME(MWO.COMPANY_CD, MWO.DIVISION_CD, MWO.GOOD_LOCATION_CD) FROM DUAL) AS GOOD_LOCATION_NM
				     , MWO.DEFECT_LOCATION_CD
				     , (SELECT MOM_COMMON_PKG.FN_GET_LOCATION_NAME(MWO.COMPANY_CD, MWO.DIVISION_CD, MWO.DEFECT_LOCATION_CD) FROM DUAL) AS DEFECT_LOCATION_NM
				     , MWO.ROUTING_ID
				     , (SELECT MOM_COMMON_PKG.FN_GET_ROUTING_NAME(MWO.COMPANY_CD, MWO.DIVISION_CD, MWO.ROUTING_ID) FROM DUAL) AS ROUTING_NM
				     , MWO.WO_STATE
				     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MWO.COMPANY_CD, MWO.DIVISION_CD, 'PP0003', MWO.WO_STATE, #{langCd, jdbcType=VARCHAR}) FROM DUAL)  AS WO_STATE_NM
				     , MWO.WO_QTY
				     , MWO.GOOD_QTY  AS TOTAL_GOOD_QTY 
				     , MWO.DEFECT_QTY  AS TOTAL_DEFECT_QTY 
				     , MWO.CLOSE_QTY
		  		     , MWO.WO_QTY + NVL(MWO.GOOD_QTY, 0) + NVL(MWO.CLOSE_QTY,0) AS REMAIN_QTY
				     , TO_CHAR(MWO.PLAN_DATE  ,'YYYY-MM-DD')      AS PLAN_DATE
				     , TO_CHAR(MWO.WO_START_TIME  ,'YYYY-MM-DD')  AS WO_START_DATE
				     , TO_CHAR(MWO.WO_END_TIME  ,'YYYY-MM-DD')    AS WO_END_DATE
				     , MWO.PRIORITY
				     , MWO.DEMAND_ID
				     , MWO.PARENT_WO_ID
				     , MWO.CLOSE_YN
				     , MWO.OUTSOURCING_YN
				     , MWO.MANUAL_YN
				     , MWO.BOR_ID
				     , MWO.REASON_CD
				     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MWO.COMPANY_CD, MWO.DIVISION_CD, 'PP0005', MWO.REASON_CD, #{langCd, jdbcType=VARCHAR}) FROM DUAL)  AS REASON_NM
				     , MWO.DESCRIPTION
				     , MWO.UPDATE_BY     AS UPDATE_USER_NO 
					 ,(SELECT MOM_COMMON_PKG.FN_GET_USER_NAME(MWO.COMPANY_CD, MWO.DIVISION_CD, MWO.UPDATE_BY) FROM DUAL ) AS UPDATE_USER_NM
				     , TO_CHAR(MWO.UPDATE_DATE ,'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
				FROM   MOM_WORK_ORDER MWO
				     , MOM_ITEM MI
				     , MOM_WORK_CENTER MWC
				     , MOM_WORK_GROUP  MWG
				WHERE  MWO.COMPANY_CD      = MI.COMPANY_CD
				AND    MWO.DIVISION_CD     = MI.DIVISION_CD
				AND    MWO.ITEM_ID         = MI.ITEM_ID  
				AND    MWO.COMPANY_CD      = MWC.COMPANY_CD
				AND    MWO.DIVISION_CD     = MWC.DIVISION_CD
				AND    MWO.WORK_CENTER_CD  = MWC.WORK_CENTER_CD     
				AND    MWC.COMPANY_CD      = MWG.COMPANY_CD
				AND    MWC.DIVISION_CD     = MWG.DIVISION_CD
				AND    MWC.WORK_GROUP_CD   = MWG.WORK_GROUP_CD  
			    AND    MWO.COMPANY_CD      = #{companyCd, jdbcType=VARCHAR}
			    AND    MWO.DIVISION_CD     = #{divisionCd, jdbcType=VARCHAR}	
			    AND    MWO.WO_START_TIME BETWEEN TO_DATE(#{woStartDateSD, jdbcType=VARCHAR}, 'YYYY-MM-DD')  AND TO_DATE(#{woStartDateED, jdbcType=VARCHAR}, 'YYYY-MM-DD') + 0.99999
			    AND    MWO.ROUTING_ID  IS NOT NULL  
			   <if test="itemIdNm != null and itemIdNm != ''">
			    AND    (UPPER(MI.ITEM_ID) LIKE '%' || UPPER(#{itemIdNm, jdbcType=VARCHAR}) || '%' OR UPPER(MI.ITEM_NM) LIKE '%' || UPPER(#{itemIdNm, jdbcType=VARCHAR}) || '%')	  
			    </if>
			    <if test="workOrderId != null and workOrderId != ''">
			    AND    (UPPER(MWO.WORK_ORDER_ID) LIKE '%' || UPPER(#{workOrderId, jdbcType=VARCHAR}) || '%')	  
			    </if>
		        <if test="workGroupCdNm != null and workGroupCdNm != ''">
			    AND    (UPPER(MWC.WORK_GROUP_CD) LIKE '%' || UPPER(#{workGroupCdNm , jdbcType=VARCHAR}) || '%' OR UPPER(MWG.WORK_GROUP_NM) LIKE '%' || UPPER(#{workGroupCdNm , jdbcType=VARCHAR}))
			    </if>	
			    <if test="workCenterCdNm != null and workCenterCdNm != ''">
			    AND    (UPPER(MWO.WORK_CENTER_CD) LIKE '%' || UPPER(#{workCenterCdNm , jdbcType=VARCHAR}) || '%' OR UPPER(MWC.WORK_CENTER_CD) LIKE '%' || UPPER(#{workCenterCdNm , jdbcType=VARCHAR})) 
			    </if>	
				<if test="woState != null and woState != ''">
				AND    MWO.WO_STATE IN (${woState})
				</if>
				<if test="outsourcingYn != null and outsourcingYn != ''">
				AND    MWO.OUTSOURCING_YN = #{outsourcingYn, jdbcType=VARCHAR}
				</if>	
				<if test="woType != null and woType != ''">
				AND    MWO.WO_TYPE IN (${woType})
				</if>
				<if test="manualYn != null and manualYn != ''">
				AND    MWO.MANUAL_YN IN (${manualYn})
		</if>
        <if test="startPage != null and startPage != '' and endPage != null and endPage != ''">
	           ) A
	    WHERE ROW_COUNT BETWEEN #{startPage, jdbcType=INTEGER} AND #{endPage, jdbcType=INTEGER}
	    </if> 
	</select>
	<select id="get_findBtn2" parameterType="java.util.HashMap" resultType="com.mom.backend.dto.LowerHashMap" fetchSize="1000">
        WITH C_PATH AS ( SELECT MWP.COMPANY_CD
	                          , MWP.DIVISION_CD
	                          , MWP.WORK_ORDER_ID
	                          , MWP.WO_RESULT_ID
	                          , MWP.OPERATION_ID
	                          , MWP.WO_RESULT_TYPE
	                          , MWP.STATE
	                          , MWP.WORK_DAY
	                          , MWP.START_TIME
	                          , MWP.END_TIME
	                          , MWP.RESULT_QTY
	                          , MWP.DESCRIPTION
	                          , MWP.UPDATE_BY
	                          , MWP.UPDATE_DATE
	                          , MWO.WO_QTY 
	                          , MWO.GOOD_QTY AS TOTAL_GOOD_QTY
	                          , MWO.DEFECT_QTY  AS TOTAL_DEFECT_QTY
	                          , MWO.CLOSE_QTY   AS TOTAL_CLOSE_QTY
	                     FROM   MOM_WO_OPERATION_RESULT MWP
	                          , MOM_WORK_ORDER   MWO
	                     WHERE  MWP.COMPANY_CD     = MWO.COMPANY_CD 
	                     AND    MWP.DIVISION_CD    = MWO.DIVISION_CD  
	                     AND    MWP.WORK_ORDER_ID  = MWO.WORK_ORDER_ID  
	                     AND    MWP.COMPANY_CD     = #{companyCd, jdbcType=VARCHAR}
	                     AND    MWP.DIVISION_CD    = #{divisionCd, jdbcType=VARCHAR}
	                     AND    MWP.WORK_ORDER_ID  = #{workOrderId, jdbcType=VARCHAR}
	                     AND    MWP.WO_RESULT_ID   = ( SELECT MWR.WO_RESULT_ID
	                                                   FROM    MOM_WO_RESULT MWR
	                                                   WHERE   MWR.COMPANY_CD     = MWP.COMPANY_CD 
	                                                   AND     MWR.DIVISION_CD    = MWP.DIVISION_CD 
	                                                   AND     MWR.WORK_ORDER_ID  = MWP.WORK_ORDER_ID 
	                                                   AND     MWR.WO_RESULT_TYPE = MWP.WO_RESULT_TYPE
	                                                   AND     MWR.STATE          = 'R'
	                                                 )
	                   )
        SELECT A.COMPANY_CD
             , A.DIVISION_CD
             , A.WORK_ORDER_ID
             , A.OPERATION_SEQ 
             , A.OPERATION_ID
             , MIN(A.KEY_ID)                    AS KEY_ID
             , MIN(A.OPERATION_NM)              AS OPERATION_NM 
             , MIN(A.WORK_STATION_CD)           AS WORK_STATION_CD 
             , MIN(A.WORK_STATION_NM)           AS WORK_STATION_NM 
             , MIN(A.INSPECTION_YN)             AS INSPECTION_YN 
             , MIN(A.FINAL_OPERATION_YN)        AS FINAL_OPERATION_YN 
             , MIN(A.MILESTONE)                 AS MILESTONE
             , MIN(A.WORK_DAY)                  AS WORK_DAY 
             , MIN(A.START_DATE)                AS START_DATE
             , MIN(A.END_DATE)                  AS END_DATE 
             , MIN(A.GOOD_QTY)                  AS GOOD_QTY 
             , MIN(A.DEFECT_QTY)                AS DEFECT_QTY
             , MIN(A.WO_RESULT_ID)              AS WO_RESULT_ID 
             , MIN(A.STATE)                     AS STATE
             , MIN((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(A.COMPANY_CD, A.DIVISION_CD, 'PP0010', A.STATE, 'KR') FROM DUAL)) AS STATE_NM
             , MIN(A.DESCRIPTION)               AS DESCRIPTION
             , MIN(A.UPDATE_USER_NO)            AS UPDATE_USER_NO
             , MIN(A.UPDATE_USER_NM)            AS UPDATE_USER_NM
             , MIN(A.UPDATE_DATE)               AS UPDATE_DATE
             , MIN(A.TOTAL_GOOD_QTY)            AS TOTAL_GOOD_QTY
             , MIN(A.TOTAL_DEFECT_QTY)          AS TOTAL_DEFECT_QTY
             , MIN(A.TOTAL_CLOSE_QTY)           AS TOTAL_CLOSE_QTY
             , MIN((A.WO_QTY - A.TOTAL_GOOD_QTY - A.TOTAL_DEFECT_QTY - A.TOTAL_CLOSE_QTY)) AS REMAIN_QTY
             , MIN(A.WO_START_DATE)             AS WO_START_DATE
        FROM ( SELECT MWO.COMPANY_CD
                    , MWO.DIVISION_CD
                    , MWO.WORK_ORDER_ID
                    , MWO.OPERATION_SEQ 
                    , MWO.OPERATION_ID
                    , MWO.WORK_ORDER_ID || '_' || MWO.OPERATION_ID AS KEY_ID
                    , (SELECT MOM_COMMON_PKG.FN_GET_OPERATION_NAME(MWO.COMPANY_CD, MWO.DIVISION_CD, MWO.OPERATION_ID) FROM DUAL) AS OPERATION_NM
                    , MWO.WORK_STATION_CD
                    , (SELECT MOM_COMMON_PKG.FN_GET_WORK_STATION_NAME(MWO.COMPANY_CD, MWO.DIVISION_CD, MWO.WORK_STATION_CD) FROM DUAL) AS WORK_STATION_NM
                    , MWO.INSPECTION_YN
                    , MWO.FINAL_OPERATION_YN
                    , MWO.MILESTONE
                    , TO_CHAR(P.WORK_DAY  ,'YYYY-MM-DD')    AS WORK_DAY
                    , TO_CHAR(P.START_TIME  ,'YYYY-MM-DD')  AS START_DATE
                    , TO_CHAR(P.END_TIME  ,'YYYY-MM-DD')    AS END_DATE
                    , DECODE(P.WO_RESULT_TYPE, 'G', NVL(P.RESULT_QTY,0))  AS GOOD_QTY
                    , DECODE(P.WO_RESULT_TYPE, 'D', NVL(P.RESULT_QTY,0))  AS DEFECT_QTY
                    , P.WO_RESULT_ID
                    , CASE WHEN P.WO_RESULT_ID IS NULL THEN 
                          DECODE(MWO.OPERATION_SEQ, MIN(MWO.OPERATION_SEQ) OVER(PARTITION BY MWO.WORK_ORDER_ID), 'R', 'W')
                      ELSE
                          P.STATE
                      END AS  STATE 
                    , P.DESCRIPTION
                    , P.UPDATE_BY    AS UPDATE_USER_NO
                    ,(SELECT MOM_COMMON_PKG.FN_GET_USER_NAME(P.COMPANY_CD, P.DIVISION_CD, P.UPDATE_BY) FROM DUAL ) AS UPDATE_USER_NM
                    , TO_CHAR(P.UPDATE_DATE ,'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
                    , NVL(MW.GOOD_QTY, 0)   AS TOTAL_GOOD_QTY
                    , NVL(MW.DEFECT_QTY, 0) AS TOTAL_DEFECT_QTY
                    , NVL(MW.CLOSE_QTY, 0)  AS TOTAL_CLOSE_QTY
                    , MW.WO_QTY
                    , TO_CHAR(MW.WO_START_TIME ,'YYYY-MM-DD')  AS WO_START_DATE
               FROM   MOM_WO_OPERATION_PATH MWO
                    , MOM_WORK_ORDER MW
                    , C_PATH  P
               WHERE  MWO.COMPANY_CD     = P.COMPANY_CD(+)                     
               AND    MWO.DIVISION_CD    = P.DIVISION_CD(+)                     
               AND    MWO.WORK_ORDER_ID  = P.WORK_ORDER_ID (+)     
               AND    MWO.OPERATION_ID   = P.OPERATION_ID  (+)            
               AND    MW.COMPANY_CD      = MWO.COMPANY_CD                     
               AND    MW.DIVISION_CD     = MWO.DIVISION_CD                     
               AND    MW.WORK_ORDER_ID   = MWO.WORK_ORDER_ID  
               AND    MWO.COMPANY_CD     = #{companyCd, jdbcType=VARCHAR}
               AND    MWO.DIVISION_CD    = #{divisionCd, jdbcType=VARCHAR}
               AND    MWO.WORK_ORDER_ID  = #{workOrderId, jdbcType=VARCHAR} ) A
        GROUP BY A.COMPANY_CD
               , A.DIVISION_CD
               , A.WORK_ORDER_ID
               , A.OPERATION_SEQ 
               , A.OPERATION_ID   
        ORDER BY A.OPERATION_SEQ
    </select>
    <delete id="remove_customBtn2-1" parameterType="java.util.List">
        DELETE FROM MOM_PROC_OPERATION_RESULT
        <where>
        <foreach collection="list" item="item" open="" close="" separator="OR">
        (       COMPANY_CD  = #{item.companyCd, jdbcType=VARCHAR}
           AND  DIVISION_CD = #{item.divisionCd, jdbcType=VARCHAR}
           AND  CREATE_BY   = #{item.userId, jdbcType=VARCHAR}
        )
        </foreach>
        </where>
    </delete>
    <insert id="create_customBtn2-1" parameterType="java.util.List">
        <foreach item="item" collection="list" index="i" separator=" " open="INSERT ALL" close="SELECT * FROM DUAL"> 
        INTO MOM_PROC_OPERATION_RESULT( COMPANY_CD
						              , DIVISION_CD
						              , WORK_ORDER_ID
						              , WO_RESULT_ID
						              , OPERATION_SEQ
						              , OPERATION_ID
						              , FINAL_OPERATION_YN
						              , STATE
						              , START_TIME
						              , END_TIME
						              , GOOD_QTY
						              , DEFECT_QTY
						              , DESCRIPTION
						              , VAL_MSG
						              , MULTI_MSG
						              , CREATE_BY
						              , CREATE_DATE )
        VALUES                        ( #{item.companyCd, jdbcType=VARCHAR}
						              , #{item.divisionCd, jdbcType=VARCHAR}
						              , #{item.workOrderId, jdbcType=VARCHAR}
						              , #{item.woResultId, jdbcType=VARCHAR}
						              , #{item.operationSeq, jdbcType=NUMERIC}
						              , #{item.operationId, jdbcType=VARCHAR}
						              , #{item.finalOperationYn, jdbcType=VARCHAR}
						              , #{item.state, jdbcType=VARCHAR}
						              , TO_DATE(#{item.startDate, jdbcType=VARCHAR},'YYYY-MM-DD HH24:MI:SS') 
						              , TO_DATE(#{item.endDate, jdbcType=VARCHAR},'YYYY-MM-DD HH24:MI:SS') 
						              , #{item.goodQty, jdbcType=NUMERIC}
						              , #{item.defectQty, jdbcType=NUMERIC}
						              , #{item.description, jdbcType=VARCHAR}
						              , #{item.valMsg, jdbcType=VARCHAR}
						              , #{item.multiMsg, jdbcType=VARCHAR}
						              , #{item.userId, jdbcType=VARCHAR}
						              , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{item.companyCd, jdbcType=VARCHAR},#{item.divisionCd, jdbcType=VARCHAR})
						              )
        </foreach>
    </insert>
    <select id="proc_customBtn2-1" statementType="CALLABLE" parameterType="java.util.HashMap" resultType="com.mom.backend.dto.LowerHashMap">  
       { CALL MOM_WO_PKG.SP_CREATE_WO_OP_RESULT( #{p_err_code, jdbcType=VARCHAR, mode=OUT}
					                           , #{p_err_msg,  jdbcType=VARCHAR, mode=OUT}
					                           , #{companyCd,  jdbcType=VARCHAR , mode=IN}
					                           , #{divisionCd, jdbcType=VARCHAR, mode=IN}											  
					                           , #{userId,     jdbcType=VARCHAR, mode=IN} )}       	              
  </select>   	 
</mapper>