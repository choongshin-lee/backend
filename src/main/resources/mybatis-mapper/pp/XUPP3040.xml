<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mom.backend.XUPP3040">
    <select id="get_findBtn1" parameterType="java.util.HashMap" resultType="com.mom.backend.dto.LowerHashMap" fetchSize="1000">
        <if test="startPage != null and startPage != '' and endPage != null and endPage != ''">
        SELECT A.*
	    FROM   (
	    </if>
		        SELECT MWO.COMPANY_CD
				     , MWO.DIVISION_CD
				     , MWO.WORK_ORDER_ID   
				     , MWO.WORK_ORDER_ID AS KEY_ID  
				     , MWO.WO_TYPE
				     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MWO.COMPANY_CD, MWO.DIVISION_CD, 'PP0002', MWO.WO_TYPE, #{langCd, jdbcType=VARCHAR}) FROM DUAL)  AS WO_TYPE_NM
				     , MWO.ITEM_ID
				     , MI.ITEM_NM
				     , MI.ITEM_SPEC
				     , MI.ITEM_TYPE
				     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MWO.COMPANY_CD, MWO.DIVISION_CD, 'MD0002', MI.ITEM_TYPE, #{langCd, jdbcType=VARCHAR}) FROM DUAL)  AS ITEM_TYPE_NM
				     , MWG.WORK_GROUP_CD
				     , MWG.WORK_GROUP_NM
				     , MWO.WORK_CENTER_CD
				     , MWC.WORK_CENTER_NM
				     , MWO.CONSUME_WAREHOUSE_CD
		             , (SELECT MOM_COMMON_PKG.FN_GET_WAREHOUSE_NAME(MWO.COMPANY_CD, MWO.DIVISION_CD, MWO.CONSUME_WAREHOUSE_CD) FROM DUAL) AS CONSUME_WAREHOUSE_NM  
		             , MWO.GOOD_WAREHOUSE_CD
		             , (SELECT MOM_COMMON_PKG.FN_GET_WAREHOUSE_NAME(MWO.COMPANY_CD, MWO.DIVISION_CD, MWO.GOOD_WAREHOUSE_CD) FROM DUAL) AS GOOD_WAREHOUSE_NM
		             , MWO.DEFECT_WAREHOUSE_CD
		             , (SELECT MOM_COMMON_PKG.FN_GET_WAREHOUSE_NAME(MWO.COMPANY_CD, MWO.DIVISION_CD, MWO.DEFECT_WAREHOUSE_CD) FROM DUAL) AS DEFECT_WAREHOUSE_NM
				     , MWO.ROUTING_ID
				     , (SELECT MOM_COMMON_PKG.FN_GET_ROUTING_NAME(MWO.COMPANY_CD, MWO.DIVISION_CD, MWO.ROUTING_ID) FROM DUAL) AS ROUTING_NM
				     , MWO.WO_STATE
				     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MWO.COMPANY_CD, MWO.DIVISION_CD, 'PP0003', MWO.WO_STATE, #{langCd, jdbcType=VARCHAR}) FROM DUAL)  AS WO_STATE_NM
				     , MWO.WO_QTY
				     , MWO.GOOD_QTY
				     , MWO.DEFECT_QTY 
				     , MWO.CLOSE_QTY
				     , MWO.WO_QTY + NVL(MWO.GOOD_QTY, 0) + NVL(MWO.CLOSE_QTY,0) AS REMAIN_QTY
				     , TO_CHAR(MWO.PLAN_DATE  ,'YYYY-MM-DD')      AS PLAN_DATE
				     , TO_CHAR(MWO.WO_START_TIME  ,'YYYY-MM-DD')  AS WO_START_DATE
				     , TO_CHAR(MWO.WO_END_TIME  ,'YYYY-MM-DD')    AS WO_END_DATE
				     , MWO.PRIORITY
				     , MWO.DEMAND_ID
				     , MWO.PARENT_WO_ID
				     , MWO.CLOSE_YN
				     , MWO.OUTSOURCING_YN
				     , MWO.MANUAL_YN
				     , MWO.BOR_ID
				     , MWO.REASON_CD
				     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MWO.COMPANY_CD, MWO.DIVISION_CD, 'PP0005', MWO.REASON_CD, #{langCd, jdbcType=VARCHAR}) FROM DUAL)  AS REASON_NM
				     , MWO.DESCRIPTION
				     , MWO.UPDATE_BY    AS UPDATE_USER_NO
				     ,(SELECT MOM_COMMON_PKG.FN_GET_USER_NAME(MWO.COMPANY_CD, MWO.DIVISION_CD, MWO.UPDATE_BY) FROM DUAL ) AS UPDATE_USER_NM
				     , TO_CHAR(MWO.UPDATE_DATE ,'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
				     , COUNT(*) OVER() AS TOTAL_COUNT
			         , ROW_NUMBER() OVER(PARTITION BY MWO.COMPANY_CD,MWO.DIVISION_CD ORDER BY MWG.WORK_GROUP_NM, MWC.WORK_CENTER_NM, MWO.WORK_ORDER_ID  ) AS ROW_COUNT	
				FROM   MOM_WORK_ORDER MWO
				     , MOM_ITEM MI
				     , MOM_WORK_CENTER MWC
				     , MOM_WORK_GROUP  MWG
				WHERE  MWO.COMPANY_CD      = MI.COMPANY_CD
				AND    MWO.DIVISION_CD     = MI.DIVISION_CD
				AND    MWO.ITEM_ID         = MI.ITEM_ID  
				AND    MWO.COMPANY_CD      = MWC.COMPANY_CD
				AND    MWO.DIVISION_CD     = MWC.DIVISION_CD
				AND    MWO.WORK_CENTER_CD  = MWC.WORK_CENTER_CD     
				AND    MWC.COMPANY_CD      = MWG.COMPANY_CD
				AND    MWC.DIVISION_CD     = MWG.DIVISION_CD
				AND    MWC.WORK_GROUP_CD   = MWG.WORK_GROUP_CD  
				AND    MWO.COMPANY_CD      = #{companyCd, jdbcType=VARCHAR}
				AND    MWO.DIVISION_CD     = #{divisionCd, jdbcType=VARCHAR}
			    AND    MWO.WO_START_TIME BETWEEN TO_DATE(#{woStartDateSD, jdbcType=VARCHAR}, 'YYYY-MM-DD')  AND TO_DATE(#{woStartDateED, jdbcType=VARCHAR}, 'YYYY-MM-DD') + 0.99999
			    <if test="itemIdNm != null and itemIdNm != ''">
				AND    (UPPER(MI.ITEM_ID) LIKE '%' || UPPER(#{itemIdNm , jdbcType=VARCHAR}) || '%' OR UPPER(MI.ITEM_NM) LIKE '%' || UPPER(#{itemIdNm , jdbcType=VARCHAR}))
				</if>   
				<if test="workOrderId != null and workOrderId != ''">
				AND    (UPPER(MWO.WORK_ORDER_ID ) LIKE '%' || UPPER(#{workOrderId, jdbcType=VARCHAR}) || '%')	  
				</if>		
			    <if test="workGroupCdNm != null and workGroupCdNm != ''">
				AND    (UPPER(MWC.WORK_GROUP_CD) LIKE '%' || UPPER(#{workGroupCdNm , jdbcType=VARCHAR}) || '%' OR UPPER(MWG.WORK_GROUP_NM) LIKE '%' || UPPER(#{workGroupCdNm , jdbcType=VARCHAR}))
				</if>	
				<if test="workCenterCdNm != null and workCenterCdNm != ''">
				AND    (UPPER(MWO.WORK_CENTER_CD) LIKE '%' || UPPER(#{workCenterCdNm , jdbcType=VARCHAR}) || '%' OR UPPER(MWC.WORK_CENTER_CD) LIKE '%' || UPPER(#{workCenterCdNm , jdbcType=VARCHAR})) 
				</if>	
				AND    MWO.WO_STATE  = 'F'
				<if test="outsourcingYn != null and outsourcingYn != ''">
				AND    MWO.OUTSOURCING_YN =  #{outsourcingYn, jdbcType=VARCHAR}
				</if>	
				<if test="woType != null and woType != ''">
				AND    MWO.WO_TYPE IN  (${woType}) 
				</if>	
				<if test="manualYn != null and manualYn != ''">
				AND MWO.MANUAL_YN =  #{manualYn, jdbcType=VARCHAR}
				</if>
        <if test="startPage != null and startPage != '' and endPage != null and endPage != ''">
	           ) A
	    WHERE ROW_COUNT BETWEEN #{startPage, jdbcType=INTEGER} AND #{endPage, jdbcType=INTEGER}
	    </if> 
	</select>
	<select id="get_findBtn2" parameterType="java.util.HashMap" resultType="com.mom.backend.dto.LowerHashMap" fetchSize="1000">
	    SELECT MBP.OPERATION_SEQ
		     , MBP.OPERATION_ID
		     , (SELECT MOM_COMMON_PKG.FN_GET_OPERATION_NAME(MBP.COMPANY_CD, MBP.DIVISION_CD, MBP.OPERATION_ID) FROM DUAL) AS OPERATION_NM
		     , MBP.WORK_STATION_CD
		     , (SELECT MOM_COMMON_PKG.FN_GET_WORK_STATION_NAME(MBP.COMPANY_CD, MBP.DIVISION_CD, MBP.WORK_STATION_CD) FROM DUAL) AS WORK_STATION_NM
		     , MBP.INSPECTION_YN
		     , MBP.FINAL_OPERATION_YN
		     , MBP.MILESTONE
		FROM   MOM_BOR_PATH MBP
		WHERE  MBP.COMPANY_CD   =  #{companyCd, jdbcType=VARCHAR}
		AND    MBP.DIVISION_CD  =  #{divisionCd, jdbcType=VARCHAR}	 
		AND    MBP.BOR_ID       =  #{borId, jdbcType=VARCHAR}	 
	    ORDER BY MBP.OPERATION_SEQ
    </select>
    <delete id="remove_customBtn1-1" parameterType="java.util.List">
        DELETE FROM MOM_PROC_WO_CONFIRM
            <where>
            <foreach collection="list" item="item" open="" close="" separator="OR">
            (     COMPANY_CD  = #{item.companyCd, jdbcType=VARCHAR}
             AND  DIVISION_CD = #{item.divisionCd, jdbcType=VARCHAR}
             AND  CREATE_BY   = #{item.userId, jdbcType=VARCHAR}
            )
            </foreach>
            </where>
    </delete> 
    <insert id="create_customBtn1-1" parameterType="java.util.List">
        <foreach item="item" collection="list" index="i" separator=" " open="INSERT ALL" close="SELECT * FROM DUAL"> 
        INTO MOM_PROC_WO_CONFIRM( COMPANY_CD
                                , DIVISION_CD
                                , WORK_ORDER_ID
                                , DESCRIPTION
                                , DEL_YN
                                , VAL_MSG
                                , MULTI_MSG
                                , CREATE_BY
                                , CREATE_DATE )
        VALUES                  ( #{item.companyCd, jdbcType=VARCHAR}
                                , #{item.divisionCd, jdbcType=VARCHAR}
                                , #{item.workOrderId, jdbcType=VARCHAR}
                                , #{item.description, jdbcType=VARCHAR}
                                , 'Y'
                                , #{item.valMsg, jdbcType=VARCHAR}
                                , #{item.multiMsg, jdbcType=VARCHAR}
                                , #{item.userId, jdbcType=VARCHAR}
                                , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{item.companyCd, jdbcType=VARCHAR},#{item.divisionCd, jdbcType=VARCHAR})
                                )
        </foreach>
    </insert>
    <select id="proc_customBtn1-1" statementType="CALLABLE" parameterType="java.util.HashMap" resultType="com.mom.backend.dto.LowerHashMap">  
        { CALL MOM_WO_PKG.SP_CONFIRM_WORK_ORDER( #{p_err_code, jdbcType=VARCHAR, mode=OUT}
                                               , #{p_err_msg,  jdbcType=VARCHAR, mode=OUT}
                                               , #{companyCd,  jdbcType=VARCHAR , mode=IN}
                                               , #{divisionCd, jdbcType=VARCHAR, mode=IN} 
                                               , #{userId,     jdbcType=VARCHAR, mode=IN} )}                      
    </select>   
</mapper>