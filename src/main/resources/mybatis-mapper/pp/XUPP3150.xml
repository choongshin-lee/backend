<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mom.backend.XUPP3150">
    <select id="get_findBtn1" parameterType="java.util.HashMap" resultType="com.mom.backend.dto.LowerHashMap" fetchSize="1000">
        <if test="startPage != null and startPage != '' and endPage != null and endPage != ''">
		    SELECT A.*
		    FROM   (
		</if>
			        SELECT MWO.COMPANY_CD
					     , MWO.DIVISION_CD
					     , MWO.WORK_ORDER_ID   
					     , MWO.WO_TYPE
					     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MWO.COMPANY_CD, MWO.DIVISION_CD, 'PP0002', MWO.WO_TYPE, #{langCd, jdbcType=VARCHAR}) FROM DUAL)  AS WO_TYPE_NM
					     , MWO.ITEM_ID
					     , MI.ITEM_NM
					     , MI.ITEM_TYPE
					     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MWO.COMPANY_CD, MWO.DIVISION_CD, 'MD0002', MI.ITEM_TYPE, #{langCd, jdbcType=VARCHAR}) FROM DUAL)  AS ITEM_TYPE_NM
					     , MI.ITEM_SPEC
					     , MWG.WORK_GROUP_CD
					     , MWG.WORK_GROUP_NM
					     , MWO.WORK_CENTER_CD
					     , MWC.WORK_CENTER_NM
					     , MWO.CONSUME_WAREHOUSE_CD
					     , (SELECT MOM_COMMON_PKG.FN_GET_WAREHOUSE_NAME(MWO.COMPANY_CD, MWO.DIVISION_CD, MWO.CONSUME_WAREHOUSE_CD) FROM DUAL) AS CONSUME_WAREHOUSE_NM  
					     , MWO.GOOD_WAREHOUSE_CD
					     , (SELECT MOM_COMMON_PKG.FN_GET_WAREHOUSE_NAME(MWO.COMPANY_CD, MWO.DIVISION_CD, MWO.GOOD_WAREHOUSE_CD) FROM DUAL) AS GOOD_WAREHOUSE_NM
					     , MWO.DEFECT_WAREHOUSE_CD
					     , (SELECT MOM_COMMON_PKG.FN_GET_WAREHOUSE_NAME(MWO.COMPANY_CD, MWO.DIVISION_CD, MWO.DEFECT_WAREHOUSE_CD) FROM DUAL) AS DEFECT_WAREHOUSE_NM
					     , MWO.MFG_UOM 
						 , (SELECT MOM_COMMON_PKG.FN_GET_UNIT_NAME(MWO.COMPANY_CD, MWO.DIVISION_CD, MWO.MFG_UOM) FROM DUAL) AS MFG_UOM_NM
						 , MWO.CONVERSION_QTY         
						 , MWO.CONVERSION_UOM
						 , (SELECT MOM_COMMON_PKG.FN_GET_UNIT_NAME(MWO.COMPANY_CD, MWO.DIVISION_CD, MWO.CONVERSION_UOM) FROM DUAL) AS CONVERSION_UOM_NM
					     , MWO.ROUTING_ID
					     , (SELECT MOM_COMMON_PKG.FN_GET_ROUTING_NAME(MWO.COMPANY_CD, MWO.DIVISION_CD, MWO.ROUTING_ID) FROM DUAL) AS ROUTING_NM
					     , MWO.WO_STATE
					     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MWO.COMPANY_CD, MWO.DIVISION_CD, 'PP0003', MWO.WO_STATE, #{langCd, jdbcType=VARCHAR}) FROM DUAL)  AS WO_STATE_NM
					     , MWO.WO_QTY
					     , MWO.GOOD_QTY
					     , MWO.DEFECT_QTY 
					     , MWO.CLOSE_QTY
				         , MWO.WO_QTY + NVL(MWO.GOOD_QTY, 0) + NVL(MWO.CLOSE_QTY,0) AS REMAIN_QTY
					     , TO_CHAR(MWO.PLAN_DATE  ,'YYYY-MM-DD')      AS PLAN_DATE
					     , TO_CHAR(MWO.WO_START_TIME  ,'YYYY-MM-DD')  AS WO_START_DATE
					     , TO_CHAR(MWO.WO_END_TIME  ,'YYYY-MM-DD')    AS WO_END_DATE
					     , MWO.PRIORITY
					     , MWO.DEMAND_ID
					     , MWO.PARENT_WO_ID
					     , MWO.CLOSE_YN
					     , MWO.OUTSOURCING_YN
					     , MWO.MANUAL_YN
					     , MWO.BOR_ID
					     , MWO.REASON_CD AS WO_REASON_CD
					     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MWO.COMPANY_CD, MWO.DIVISION_CD, 'PP0005', MWO.REASON_CD, #{langCd, jdbcType=VARCHAR}) FROM DUAL)  AS REASON_NM
					     , MWO.DESCRIPTION
					     , MWO.UPDATE_BY     AS UPDATE_USER_NO 
					     ,(SELECT MOM_COMMON_PKG.FN_GET_USER_NAME(MWO.COMPANY_CD, MWO.DIVISION_CD, MWO.UPDATE_BY) FROM DUAL ) AS UPDATE_USER_NM
					     , TO_CHAR(MWO.UPDATE_DATE ,'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
					     , ROWIDTOCHAR(MWO.ROWID)  AS KEY_ID
					     , COUNT(*) OVER()   AS TOTAL_COUNT
		                 , ROW_NUMBER() OVER(PARTITION BY MWO.COMPANY_CD,MWO.DIVISION_CD ORDER BY MWO.WORK_ORDER_ID) AS ROW_CNT
					FROM   MOM_WORK_ORDER MWO
					     , MOM_ITEM MI
					     , MOM_WORK_CENTER MWC
					     , MOM_WORK_GROUP  MWG
					WHERE  MWO.COMPANY_CD      = MI.COMPANY_CD
					AND    MWO.DIVISION_CD     = MI.DIVISION_CD
					AND    MWO.ITEM_ID         = MI.ITEM_ID  
					AND    MWO.COMPANY_CD      = MWC.COMPANY_CD
					AND    MWO.DIVISION_CD     = MWC.DIVISION_CD
					AND    MWO.WORK_CENTER_CD  = MWC.WORK_CENTER_CD     
					AND    MWC.COMPANY_CD      = MWG.COMPANY_CD
					AND    MWC.DIVISION_CD     = MWG.DIVISION_CD
					AND    MWC.WORK_GROUP_CD   = MWG.WORK_GROUP_CD  
					AND    MWO.COMPANY_CD      = #{companyCd, jdbcType=VARCHAR}
					AND    MWO.DIVISION_CD     = #{divisionCd, jdbcType=VARCHAR}
				    AND    MWO.WO_START_TIME BETWEEN TO_DATE(#{woStartDateSD, jdbcType=VARCHAR}, 'YYYY-MM-DD')  AND TO_DATE(#{woStartDateED, jdbcType=VARCHAR}, 'YYYY-MM-DD') + 0.99999
				    AND    MWO.OUTSOURCING_YN    = 'N'
				    AND    MWO.WO_STATE          = 'F'
				    <if test="itemIdNm != null and itemIdNm != ''">
					AND    (UPPER(MI.ITEM_ID) LIKE '%' || UPPER(#{itemIdNm , jdbcType=VARCHAR}) || '%' OR UPPER(MI.ITEM_NM) LIKE '%' || UPPER(#{itemIdNm , jdbcType=VARCHAR}))
					</if> 
					<if test="workOrderId != null and workOrderId != ''">
					AND    (UPPER(MWO.WORK_ORDER_ID ) LIKE '%' || UPPER(#{workOrderId, jdbcType=VARCHAR}) || '%')	  
					</if>
				    <if test="workGroupCdNm != null and workGroupCdNm != ''">
				    AND    (UPPER(MWC.WORK_GROUP_CD) LIKE '%' || UPPER(#{workGroupCdNm , jdbcType=VARCHAR}) || '%' OR UPPER(MWG.WORK_GROUP_NM) LIKE '%' || UPPER(#{workGroupCdNm , jdbcType=VARCHAR}))
				    </if>	
				    <if test="workCenterCd != null and workCenterCd != ''">
				    AND    MWO.WORK_CENTER_CD = #{workCenterCd , jdbcType=VARCHAR}  
				    </if>
				    AND    MWO.WORK_CENTER_CD IN ( SELECT MCR.WORK_CENTER_CD
												   FROM   MOM_USER_WORK_CENTER_REL MCR
													    , MOM_WORK_CENTER MWC
												   WHERE  MCR.COMPANY_CD     = MWC.COMPANY_CD
												   AND    MCR.DIVISION_CD    = MWC.DIVISION_CD
												   AND    MCR.WORK_CENTER_CD = MWC.WORK_CENTER_CD
												   AND    MCR.COMPANY_CD     = #{companyCd, jdbcType=VARCHAR}
												   AND    MCR.DIVISION_CD    = #{divisionCd, jdbcType=VARCHAR} 
												   AND    MCR.USER_NO        = #{userId, jdbcType=VARCHAR}
												   AND    MWC.USE_YN         = 'Y'
												   AND    MCR.USE_YN         = 'Y')					
		<if test="startPage != null and startPage != '' and endPage != null and endPage != ''">
				       ) A
				WHERE ROW_CNT BETWEEN #{startPage, jdbcType=INTEGER} AND #{endPage, jdbcType=INTEGER}
		</if>  		
		
	</select>
	<select id="get_findBtn2" parameterType="java.util.HashMap" resultType="com.mom.backend.dto.LowerHashMap" fetchSize="1000">
		SELECT MDL.COMPANY_CD
		     , MDL.DIVISION_CD
		     , MDL.WORK_ORDER_ID
		     , MDL.ITEM_ID
		     , MI.ITEM_NM
		     , MI.ITEM_SPEC
		     , MI.ITEM_TYPE
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MDL.COMPANY_CD, MDL.DIVISION_CD, 'MD0002', MI.ITEM_TYPE, #{langCd, jdbcType=VARCHAR}) FROM DUAL)  AS ITEM_TYPE_NM
		     , MDL.REQ_QTY    
		     , MDL.MFG_UOM                       
		     , (SELECT MOM_COMMON_PKG.FN_GET_UNIT_NAME(MDL.COMPANY_CD, MDL.DIVISION_CD, MDL.MFG_UOM) FROM DUAL) AS MFG_UOM_NM
		     , (MWO.WO_QTY * MDL.REQ_QTY)        AS MFG_INPUT_QTY   
		     , MDL.CONVERSION_UOM                AS STOCK_UOM
		     , (SELECT MOM_COMMON_PKG.FN_GET_UNIT_NAME(MDL.COMPANY_CD, MDL.DIVISION_CD, MDL.CONVERSION_UOM) FROM DUAL) AS STOCK_UOM_NM
		     , MDL.CONVERSION_QTY                AS STOCK_RATE
		     , (MWO.WO_QTY * MDL.CONVERSION_QTY) AS STOCK_INPUT_QTY 
		     , MDL.DEDUCT_TYPE
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MDL.COMPANY_CD, MDL.DIVISION_CD, 'MD0006', MDL.DEDUCT_TYPE, #{langCd, jdbcType=VARCHAR}) FROM DUAL)  AS DEDUCT_TYPE_NM
		     , MWO.CONSUME_WAREHOUSE_CD  AS WAREHOUSE_CD
             , (SELECT MOM_COMMON_PKG.FN_GET_WAREHOUSE_NAME(MWO.COMPANY_CD, MWO.DIVISION_CD, MWO.CONSUME_WAREHOUSE_CD) FROM DUAL)  WAREHOUSE_NM
		     , MDL.DESCRIPTION
		     , MDL.UPDATE_BY     AS UPDATE_USER_NO 
		     ,(SELECT MOM_COMMON_PKG.FN_GET_USER_NAME(MDL.COMPANY_CD, MDL.DIVISION_CD, MDL.UPDATE_BY) FROM DUAL ) AS UPDATE_USER_NM
			 , TO_CHAR(MDL.UPDATE_DATE ,'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
			 , ROWIDTOCHAR(MDL.ROWID)  AS KEY_ID
			 , MDL.DEDUCT_ID
		FROM   MOM_WORK_ORDER  MWO
		     , MOM_MATERIAL_DEDUCT_LIST MDL
		     , MOM_ITEM MI
		WHERE  MWO.COMPANY_CD    = MDL.COMPANY_CD
		AND    MWO.DIVISION_CD   = MDL.DIVISION_CD
		AND    MWO.WORK_ORDER_ID = MDL.WORK_ORDER_ID
		AND    MDL.COMPANY_CD    = MI.COMPANY_CD
		AND    MDL.DIVISION_CD   = MI.DIVISION_CD
		AND    MDL.ITEM_ID       = MI.ITEM_ID
		AND    MDL.COMPANY_CD    = #{companyCd, jdbcType=VARCHAR}
		AND    MDL.DIVISION_CD   = #{divisionCd, jdbcType=VARCHAR}
		AND    MDL.WORK_ORDER_ID = #{workOrderId, jdbcType=VARCHAR}
		ORDER BY MDL.ITEM_ID   
    </select>
    <select id="get_findBtn3" parameterType="java.util.HashMap" resultType="com.mom.backend.dto.LowerHashMap" fetchSize="1000">
	    SELECT MS.COMPANY_CD
		     , MS.DIVISION_CD
		     , MS.ITEM_ID
		     , MI.ITEM_NM
		     , MI.ITEM_TYPE
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MI.COMPANY_CD, MI.DIVISION_CD, 'MD0002', MI.ITEM_TYPE, #{langCd, jdbcType=VARCHAR}) FROM DUAL)  AS ITEM_TYPE_NM
		     , MI.ITEM_SPEC
		     , MS.WAREHOUSE_CD
		     , (SELECT MOM_COMMON_PKG.FN_GET_WAREHOUSE_NAME(MS.COMPANY_CD, MS.DIVISION_CD, MS.WAREHOUSE_CD) FROM DUAL)  AS WAREHOUSE_NM
		     , MS.LOCATION_CD
		     , (SELECT MOM_COMMON_PKG.FN_GET_LOCATION_NAME(MS.COMPANY_CD, MS.DIVISION_CD, MS.LOCATION_CD) FROM DUAL) AS LOCATION_NM
		     , MS.LOT_ID
		     , MS.HCN_CD
		     , MI.UOM           AS STOCK_UOM
		     , (SELECT MOM_COMMON_PKG.FN_GET_UNIT_NAME(MI.COMPANY_CD, MI.DIVISION_CD, MI.UOM) FROM DUAL) AS STOCK_UOM_NM
		     , MS.STOCK_QTY
		     , MS.ALLOCATE_QTY
		     , MS.STOCK_QTY - NVL(MS.ALLOCATE_QTY,0) AS AVAILABLE_QTY
		     , MS.STOCK_QTY - NVL(MS.ALLOCATE_QTY,0) AS INPUT_QTY
		     , #{workOrderId, jdbcType=VARCHAR}      AS WORK_ORDER_ID
		     , #{deductId, jdbcType=VARCHAR}         AS DEDUCT_ID
		     , #{stockInputQty, jdbcType=NUMERIC}    AS STOCK_INPUT_QTY
		     , MS.ITEM_STOCK_ID
		     , MS.DESCRIPTION
		FROM   MOM_STOCK MS
		     , MOM_ITEM  MI
		WHERE  MS.COMPANY_CD    = MI.COMPANY_CD
		AND    MS.DIVISION_CD   = MI.DIVISION_CD
		AND    MS.ITEM_ID       = MI.ITEM_ID
		AND    MS.COMPANY_CD    = #{companyCd, jdbcType=VARCHAR}
		AND    MS.DIVISION_CD   = #{divisionCd, jdbcType=VARCHAR}
		AND    MS.ITEM_ID       = #{itemId, jdbcType=VARCHAR}
		AND    MS.WAREHOUSE_CD  = #{warehouseCd, jdbcType=VARCHAR}
	</select>  
    <delete id="remove_customBtn3-1" parameterType="java.util.List">
        DELETE FROM MOM_PROC_MATERIAL_INPUT
            <where>
            <foreach collection="list" item="item" open="" close="" separator="OR">
            (     COMPANY_CD  = #{item.companyCd, jdbcType=VARCHAR}
             AND  DIVISION_CD = #{item.divisionCd, jdbcType=VARCHAR}
             AND  CREATE_BY   = #{item.userId, jdbcType=VARCHAR}
            )
            </foreach>
            </where>
    </delete>  
    <insert id="create_customBtn3-1" parameterType="java.util.List">
        <foreach item="item" collection="list" index="i" separator=" " open="INSERT ALL" close="SELECT * FROM DUAL"> 
        INTO MOM_PROC_MATERIAL_INPUT( COMPANY_CD
                                    , DIVISION_CD
                                    , WORK_ORDER_ID
                                    , DEDUCT_ID
                                    , ITEM_STOCK_ID
                                    , INPUT_QTY
                                    , STOCK_INPUT_QTY
                                    , DESCRIPTION
                                    , VAL_MSG
                                    , MULTI_MSG
                                    , CREATE_BY
                                    , CREATE_DATE )
        VALUES                      ( #{item.companyCd, jdbcType=VARCHAR}
                                    , #{item.divisionCd, jdbcType=VARCHAR}
                                    , #{item.workOrderId, jdbcType=VARCHAR}
                                    , #{item.deductId, jdbcType=VARCHAR}
                                    , #{item.itemStockId, jdbcType=VARCHAR}
                                    , #{item.inputQty, jdbcType=NUMERIC}
                                    , #{item.stockInputQty, jdbcType=NUMERIC}
                                    , #{item.description, jdbcType=VARCHAR}
                                    , #{item.valMsg, jdbcType=VARCHAR}
                                    , #{item.multiMsg, jdbcType=VARCHAR}
                                    , #{item.userId, jdbcType=VARCHAR}
                                    , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{item.companyCd, jdbcType=VARCHAR},#{item.divisionCd, jdbcType=VARCHAR})
                                    )
        </foreach>
    </insert>
    <select id="proc_customBtn3-1" statementType="CALLABLE" parameterType="java.util.HashMap" resultType="com.mom.backend.dto.LowerHashMap">  
        { CALL MOM_WO_PKG.SP_CREATE_MATERIAL_INPUT( #{p_err_code, jdbcType=VARCHAR, mode=OUT}
                                                  , #{p_err_msg,  jdbcType=VARCHAR, mode=OUT}
                                                  , #{companyCd,  jdbcType=VARCHAR, mode=IN}
                                                  , #{divisionCd, jdbcType=VARCHAR, mode=IN}                        
                                                  , #{userId,     jdbcType=VARCHAR, mode=IN} )}                   
    </select>  
</mapper>