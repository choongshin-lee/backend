<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mom.backend.XUPP3090">
    <select id="get_findBtn1" parameterType="java.util.HashMap" resultType="com.mom.backend.dto.LowerHashMap" fetchSize="1000">
        <if test="startPage != null and startPage != '' and endPage != null and endPage != ''">
		    SELECT A.*
		    FROM   (
		</if>
			        WITH C_RESULT AS ( SELECT MWR.COMPANY_CD
					                        , MWR.DIVISION_CD
					                        , MWR.WO_RESULT_ID
					                        , MWR.WORK_ORDER_ID
					                        , MWR.WORK_CENTER_CD
					                        , MWR.START_TIME
					                        , MWR.END_TIME
					                        , MWR.GOOD_QTY
					                        , MWR.DEFECT_QTY
					                        , MWR.GOOD_QTY + NVL(MWR.DEFECT_QTY, 0) AS DEDUCT_QTY
					                        , MWR.DEDUCT_CLOSE_FLAG
					                        , MWR.UPDATE_BY     AS UPDATE_USER_NO 
					                        , TO_CHAR(MWR.UPDATE_DATE ,'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
					                   FROM   MOM_WO_RESULT MWR
					                   WHERE  MWR.COMPANY_CD     = #{companyCd, jdbcType=VARCHAR}
	 	  					           AND    MWR.DIVISION_CD    = #{divisionCd, jdbcType=VARCHAR}
									   AND    MWR.START_TIME BETWEEN TO_DATE(#{woResultDateSD, jdbcType=VARCHAR}, 'YYYY-MM-DD')  AND TO_DATE(#{woResultDateED, jdbcType=VARCHAR}, 'YYYY-MM-DD') + 0.99999
					                   AND    MWR.STATE          = 'E'       
					                   AND    MWR.DEDUCT_CLOSE_FLAG = 'N' )
					SELECT MWR.COMPANY_CD
					     , MWR.DIVISION_CD
					     , MWR.WO_RESULT_ID
					     , MWR.WO_RESULT_ID  AS KEY_ID
					     , MWR.WORK_ORDER_ID
					     , MWO.WO_TYPE
					     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MWO.COMPANY_CD, MWO.DIVISION_CD, 'PP0002', MWO.WO_TYPE, #{langCd, jdbcType=VARCHAR}) FROM DUAL)  AS WO_TYPE_NM 
					     , MWR.WORK_CENTER_CD
					     , MWO.ITEM_ID
					     , MI.ITEM_NM
					     , MI.ITEM_SPEC
					     , MI.ITEM_TYPE
					     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MWO.COMPANY_CD, MWO.DIVISION_CD, 'MD0002', MI.ITEM_TYPE, #{langCd, jdbcType=VARCHAR}) FROM DUAL)  AS ITEM_TYPE_NM 
					     , MWG.WORK_GROUP_CD
					     , MWG.WORK_GROUP_NM
					     , MWO.WORK_CENTER_CD
					     , MWC.WORK_CENTER_NM
					     , MWO.CONSUME_LOCATION_CD
					     , (SELECT MOM_COMMON_PKG.FN_GET_LOCATION_NAME(MWO.COMPANY_CD, MWO.DIVISION_CD, MWO.CONSUME_LOCATION_CD) FROM DUAL) AS CONSUME_LOCATION_NM  
					     , MWO.GOOD_LOCATION_CD
					     , (SELECT MOM_COMMON_PKG.FN_GET_LOCATION_NAME(MWO.COMPANY_CD, MWO.DIVISION_CD, MWO.GOOD_LOCATION_CD) FROM DUAL) AS GOOD_LOCATION_NM
					     , MWO.DEFECT_LOCATION_CD
					     , (SELECT MOM_COMMON_PKG.FN_GET_LOCATION_NAME(MWO.COMPANY_CD, MWO.DIVISION_CD, MWO.DEFECT_LOCATION_CD) FROM DUAL) AS DEFECT_LOCATION_NM
 		                 , MWO.ROUTING_ID
					     , (SELECT MOM_COMMON_PKG.FN_GET_ROUTING_NAME(MWO.COMPANY_CD, MWO.DIVISION_CD, MWO.ROUTING_ID) FROM DUAL) AS ROUTING_NM
					     , MWO.WO_STATE
					     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MWO.COMPANY_CD, MWO.DIVISION_CD, 'PP0003', MWO.WO_STATE, #{langCd, jdbcType=VARCHAR}) FROM DUAL)  AS WO_STATE_NM
					     , MWO.WO_QTY
					     , MWR.GOOD_QTY
					     , MWR.DEFECT_QTY
					     , MWR.GOOD_QTY + NVL(MWR.DEFECT_QTY, 0) AS DEDUCT_QTY
					     , TO_CHAR(MWR.START_TIME  ,'YYYY-MM-DD')  AS START_TIME
					     , TO_CHAR(MWR.END_TIME  ,'YYYY-MM-DD')    AS END_TIME
					     , MWO.OUTSOURCING_YN
					     , MWO.MANUAL_YN
					     , MWO.BOR_ID
					     , MWO.DESCRIPTION
					     , MWR.UPDATE_USER_NO 
					     ,(SELECT MOM_COMMON_PKG.FN_GET_USER_NAME(MWR.COMPANY_CD, MWR.DIVISION_CD, MWR.UPDATE_USER_NO) FROM DUAL ) AS UPDATE_USER_NM
					     , MWR.UPDATE_DATE
					     , COUNT(*) OVER()   AS TOTAL_COUNT
					     , ROW_NUMBER() OVER(PARTITION BY MWO.COMPANY_CD,MWO.DIVISION_CD ORDER BY MWR.WO_RESULT_ID) AS ROW_CNT
					FROM   C_RESULT MWR                  
					     , MOM_WORK_ORDER MWO
					     , MOM_ITEM MI 
					     , MOM_WORK_CENTER MWC
					     , MOM_WORK_GROUP  MWG
					WHERE  MWR.COMPANY_CD    = MWO.COMPANY_CD
					AND    MWR.DIVISION_CD   = MWO.DIVISION_CD
					AND    MWR.WORK_ORDER_ID = MWO.WORK_ORDER_ID
					AND    MWO.COMPANY_CD    = MI.COMPANY_CD
					AND    MWO.DIVISION_CD   = MI.DIVISION_CD
					AND    MWO.ITEM_ID       = MI.ITEM_ID  
					AND    MWO.COMPANY_CD      = MWC.COMPANY_CD
					AND    MWO.DIVISION_CD     = MWC.DIVISION_CD
					AND    MWO.WORK_CENTER_CD  = MWC.WORK_CENTER_CD     
					AND    MWC.COMPANY_CD      = MWG.COMPANY_CD
					AND    MWC.DIVISION_CD     = MWG.DIVISION_CD
					AND    MWC.WORK_GROUP_CD   = MWG.WORK_GROUP_CD   
					<if test="itemIdNm != null and itemIdNm != ''">
					AND    (UPPER(MI.ITEM_ID) LIKE '%' || UPPER(#{itemIdNm , jdbcType=VARCHAR}) || '%' OR UPPER(MI.ITEM_NM) LIKE '%' || UPPER(#{itemIdNm , jdbcType=VARCHAR}))
					</if> 
					<if test="workOrderId != null and workOrderId != ''">
					AND    (UPPER(MWO.WORK_ORDER_ID ) LIKE '%' || UPPER(#{workOrderId, jdbcType=VARCHAR}) || '%')   
					</if>
					<if test="workGroupCdNm != null and workGroupCdNm != ''">
					AND    (UPPER(MWC.WORK_GROUP_CD) LIKE '%' || UPPER(#{workGroupCdNm , jdbcType=VARCHAR}) || '%' OR UPPER(MWG.WORK_GROUP_NM) LIKE '%' || UPPER(#{workGroupCdNm , jdbcType=VARCHAR}))
					</if> 
					<if test="workCenterCdNm != null and workCenterCdNm != ''">
					AND    (UPPER(MWO.WORK_CENTER_CD) LIKE '%' || UPPER(#{workCenterCdNm , jdbcType=VARCHAR}) || '%' OR UPPER(MWC.WORK_CENTER_CD) LIKE '%' || UPPER(#{workCenterCdNm , jdbcType=VARCHAR})) 
					</if>
					<if test="woState != null and woState != ''">
					AND    MWO.WO_STATE IN (${woState})
					</if>
					<if test="outsourcingYn != null and outsourcingYn != ''">
					AND    MWO.OUTSOURCING_YN = #{outsourcingYn, jdbcType=VARCHAR}
					</if> 
					<if test="woType != null and woType != ''">
					AND MWO.WO_TYPE IN (${woType})
					</if>
					<if test="manualYn != null and manualYn != ''">
					AND MWO.MANUAL_YN =  #{manualYn, jdbcType=VARCHAR}
					</if>	
		<if test="startPage != null and startPage != '' and endPage != null and endPage != ''">
				       ) A
				WHERE ROW_CNT BETWEEN #{startPage, jdbcType=INTEGER} AND #{endPage, jdbcType=INTEGER}
		</if>  		
	</select>
	<select id="get_findBtn2" parameterType="java.util.HashMap" resultType="com.mom.backend.dto.LowerHashMap" fetchSize="1000">
	    SELECT MDL.COMPANY_CD
		     , MDL.DIVISION_CD
		     , MDL.WORK_ORDER_ID
		     , MWR.WO_RESULT_ID
		     , MWO.CONSUME_LOCATION_CD
		     , (SELECT MOM_COMMON_PKG.FN_GET_LOCATION_NAME(MWO.COMPANY_CD, MWO.DIVISION_CD, MWO.CONSUME_LOCATION_CD) FROM DUAL) AS CONSUME_LOCATION_NM
			 , NVL((SELECT MOM_STOCK_PKG.FN_GET_ITEM_LOCATION_STOCK_QTY(MDL.COMPANY_CD, MDL.DIVISION_CD, MDL.ITEM_ID, MWO.CONSUME_LOCATION_CD) FROM DUAL),0) AS CURRENT_STOCK_QTY
		     , MDL.ITEM_ID
		     , MI.ITEM_NM
		     , MI.ITEM_SPEC
		     , MI.ITEM_TYPE
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MDL.COMPANY_CD, MDL.DIVISION_CD, 'MD0002', MI.ITEM_TYPE, #{langCd, jdbcType=VARCHAR}) FROM DUAL)  AS ITEM_TYPE_NM
		     , NVL(MWR.GOOD_QTY, 0)   AS GOOD_QTY
		     , NVL(NWR.DEFECT_QTY,0)  AS DEFECT_QTY 
		     , MDL.REQ_QTY
		     , (NVL(MWR.GOOD_QTY,0) + NVL(NWR.DEFECT_QTY,0) ) * MDL.REQ_QTY AS DEDUCT_QTY
		     , MDL.DESCRIPTION
		     , MDL.UPDATE_BY     AS UPDATE_USER_NO 
		     ,(SELECT MOM_COMMON_PKG.FN_GET_USER_NAME(MDL.COMPANY_CD, MDL.DIVISION_CD, MDL.UPDATE_BY) FROM DUAL ) AS UPDATE_USER_NM
		     , TO_CHAR(MDL.UPDATE_DATE ,'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
		FROM   MOM_WO_RESULT MWR
		     , MOM_WORK_ORDER MWO
		     , MOM_MATERIAL_DEDUCT_LIST MDL
		     , MOM_ITEM MI
		WHERE  MWR.COMPANY_CD    = MWO.COMPANY_CD
		AND    MWR.DIVISION_CD   = MWO.DIVISION_CD
		AND    MWR.WORK_ORDER_ID = MWO.WORK_ORDER_ID     
		AND    MWO.COMPANY_CD    = MDL.COMPANY_CD
		AND    MWO.DIVISION_CD   = MDL.DIVISION_CD
		AND    MWO.WORK_ORDER_ID = MDL.WORK_ORDER_ID
		AND    MDL.COMPANY_CD    = MI.COMPANY_CD
		AND    MDL.DIVISION_CD   = MI.DIVISION_CD
		AND    MDL.ITEM_ID       = MI.ITEM_ID
		AND    MWR.COMPANY_CD    = #{companyCd, jdbcType=VARCHAR}
		AND    MWR.DIVISION_CD   = #{divisionCd, jdbcType=VARCHAR}
		AND    MWR.WO_RESULT_ID  = #{woResultId, jdbcType=VARCHAR} 
		AND    MWI.DEDUCT_YN     = 'M'
		AND    MDL.CANCEL_YN     = 'N'   
    </select>
    <delete id="remove_customBtn2-1" parameterType="java.util.List">
        DELETE FROM MOM_PROC_ITEM_DEDUCT
	        <where>
	        <foreach collection="list" item="item" open="" close="" separator="OR">
	        (       COMPANY_CD  = #{item.companyCd, jdbcType=VARCHAR}
	           AND  DIVISION_CD = #{item.divisionCd, jdbcType=VARCHAR}
	           AND  CREATE_BY   = #{item.userId, jdbcType=VARCHAR}
	        )
	        </foreach>
	        </where>
    </delete>  
    <insert id="create_customBtn2-1" parameterType="java.util.List">
        <foreach item="item" collection="list" index="i" separator=" " open="INSERT ALL" close="SELECT * FROM DUAL"> 
        INTO MOM_PROC_ITEM_DEDUCT( COMPANY_CD
                         , DIVISION_CD
                         , WORK_ORDER_ID
                         , WO_RESULT_ID 
                         , CONSUME_LOCATION_CD
                         , ITEM_ID
                         , GOOD_QTY 
                         , DEFECT_QTY 
                         , REQ_QTY 
                         , DESCRIPTION
                         , VAL_MSG
                         , MULTI_MSG
                         , CREATE_BY
                         , CREATE_DATE )
        VALUES           ( #{item.companyCd, jdbcType=VARCHAR}
                         , #{item.divisionCd, jdbcType=VARCHAR}
                         , #{item.workOrderId, jdbcType=VARCHAR}
                         , #{item.woResultId , jdbcType=VARCHAR}
                         , #{item.consumeLocationCd, jdbcType=VARCHAR}
                         , #{item.itemId, jdbcType=VARCHAR}
                         , #{item.goodQty, jdbcType=NUMERIC}
                         , #{item.defectQty, jdbcType=NUMERIC}
                         , #{item.reqQty, jdbcType=NUMERIC}
                         , #{item.description, jdbcType=VARCHAR}
                         , #{item.valMsg, jdbcType=VARCHAR}
                         , #{item.multiMsg, jdbcType=VARCHAR}
                         , #{item.userId, jdbcType=VARCHAR}
                         , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{item.companyCd, jdbcType=VARCHAR},#{item.divisionCd, jdbcType=VARCHAR})
                         )
        </foreach>
    </insert>
    <select id="proc_customBtn2-1" statementType="CALLABLE" parameterType="java.util.HashMap" resultType="com.mom.backend.dto.LowerHashMap">  
        { CALL MOM_WO_PKG.SP_CREATE_MANUAL_ITEM_DEDUCT( #{p_err_code, jdbcType=VARCHAR, mode=OUT}
			                                          , #{p_err_msg,  jdbcType=VARCHAR, mode=OUT}
			                                          , #{companyCd,  jdbcType=VARCHAR, mode=IN}
			                                          , #{divisionCd, jdbcType=VARCHAR, mode=IN}											  
			                                          , #{userId,     jdbcType=VARCHAR, mode=IN} )}    	              
    </select>  
</mapper>